@{
# helper functions:
def makeCondBegin(c):
    s = ''
    for e in c.exprs:
        s += '!ifeq %s %s\n' % (e.option.name, e.value)
    return s.strip()
def makeCondEnd(c):
    s = ''
    for e in range(0,len(c.exprs)):
        s += '!endif\n'
    return s.strip()
}@
@empy.include(os.path.join(RULESDIR, '_hdr_makefile.empy'))
@[if OPTIONS_FILE != '']!include @OPTIONS_FILE
@[end if]@
@[if OPTIONS_FILE == '']@
@empy.include(os.path.join(RULESDIR, 'watcom-opts.empy'))
@[end if]@

# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

# Speed up compilation a bit:
!ifdef __LOADDLL__
!  loaddll wcc      wccd
!  loaddll wccaxp   wccdaxp
!  loaddll wcc386   wccd386
!  loaddll wpp      wppdi86
!  loaddll wppaxp   wppdaxp
!  loaddll wpp386   wppd386
!  loaddll wlink    wlink
!  loaddll wlib     wlibd
!endif

# We need these variables in some bakefile-made rules:
WATCOM_CWD = $+ $(%cdrive):$(%cwd) $-

### Conditionally set variables: ###

@[for c in cond_vars]@
@c.name =
@[for v in c.values]@
@makeCondBegin(v.cond)
@utils.wrapLongLine('%s = ' % c.name, v.value, ' &', variable=c.name)
@makeCondEnd(v.cond)
@[end for]@
@[end for]@

### Variables: ###

@[for v in make_vars]@
@utils.wrapLongLine('%s = ' % v.name, v.value, ' &', variable=v.name)
@[end for]@

@[if BUILDDIR != '.']
all : @BUILDDIR
@BUILDDIR :
@\t-if not exist @BUILDDIR mkdir @BUILDDIR
@[end if]@

### Targets: ###
@[for t in targets]
@[if t.cond != None]@makeCondBegin(t.cond)
@[end if]@
@t.__targetdir@t.__targetname : @[if t.__is_phony=='1'].SYMBOLIC@[end if] @t.__deps
@[for cmd in t.__command.splitlines()]@
@(cmd.strip()=='|' ? '|' : '\t'+cmd.strip())
@[end for]@
@[if t.cond != None]@makeCondEnd(t.cond)
@[end if]@
@[end for]@

@[for f in fragments]
@f.content
@[end for]@
