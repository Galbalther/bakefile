<chapter id="ch.targets">
  <title>Targets</title>
  <para id="targets">
    Bakefile targets correspond to native makefiles targets, they are compiled
    programs, libraries or more complex actions such as "install" or "dist"
    (which makes "make dist" command possible). Target syntax is similar to
    <link linkend="ch.commands">commands syntax</link>:
    <programlisting><![CDATA[
<RULE id="NAME" [template="TEMPLATE,..."]
[template_append="TEMPLATE2,..."] [cond="CONDITION"] [category="CATEGORY"]>
  SPECIFICATION
</RULE>
]]></programlisting>
    There are six elementary rules (types of targets):
    <xref linkend="rule.exe"/>,
    <xref linkend="rule.dll"/>,
    <xref linkend="rule.module"/>,
    <xref linkend="rule.lib"/>,
    <xref linkend="rule.phony"/> and
    <xref linkend="rule.action"/>. 
    More target types can be defined in ruleset (or even in the makefile) using
    <xref linkend="cmd.define-rule"/> command. Such new rules only extend
    one of elementary rules, though.
  </para>
  <para>
    Target has unique <varname>id</varname>. This ID is usually present in
    generated makefile (so you can type <userinput>make myprogram</userinput>
    if you have target with ID <literal>myprogram</literal>). Name of the
    generated file is based on the ID, too. </para>
  <para>
    <varname>template</varname> is optional comma-separated list of
    IDs of <link linkend="cmd.template">templates</link> that the target is
    derived from. <varname>template_append</varname> is optional
    comma-separated list of templates that are <emphasis>appended</emphasis>
    to target specification (<varname>template</varname> inserts the template
    before the specification).
  </para>
  <para>
    If <varname>cond</varname> attribute was given then the target is only
    compiled if given
    <link linkend="concept.conditions">condition was met</link> (the decision
    may be done either by Bakefile if the condition is weak or by generated
    makefile).
  </para>
  <para>
    In addition to the ID, every target can have
    <link linkend="concept.variables">variables</link> attached to it.
    These variables are only effective for the target (unlike global variables
    that affect all targets). They can be used to override global default
    (for example <varname>DLLEXT</varname> variable is <literal>.dll</literal>
    for Windows makefiles but you can override the variable locally for
    <literal>sharpen_plugin</literal> target to be <literal>.plugin</literal>).
  </para>
  <para>
    Target is described using <varname>SPECIFICATION</varname>, which is a
    list of <xref linkend="cmd.set"/>
    command and so-called <emphasis>tags</emphasis>. Tags are rule-specific
    constructs that provide simple way to e.g. list source files for an
    executable, set include directories or define compiler flags. Unlike
    <function>set</function> they don't set any specific variable, but rather
    set various variables in <emphasis>generator-specific way</emphasis>.
    Tag syntax is almost identical to <function>set</function> function, but
    without variable name:
  <programlisting><![CDATA[<TAGNAME>VALUE</TAGNAME></RULE>]]></programlisting>
    Common tags are described in
    <link linkend="rules">the section bellow</link>, tags specific to
    particular modules are described in <xref linkend="ch.modules"/>.
    A small example of using tags:
    <programlisting><![CDATA[
<exe id="myprogram">
  <!-- set target-specific variable: -->
  <set var="SOME_VAR">value</set>
  <!-- three tags: -->
  <sources>file1.c myprogram.c utils.c</sources>
  <include>./includes</include>
  <define>USE_UNICODE</define>
</exe>
]]></programlisting>
    Unless the documentation says otherwise, you can use the same tag
    repeatedly with same target.
  </para>
  <para>
    Optional <varname>category</varname> attribute can be given to clasify
    the target. Possible clasifications are <literal>all</literal> (reserved
    for the <literal>all</literal> target of makefiles and cannot be used
    in user bakefiles), <literal>normal</literal> for targets declared in
    bakefiles and <literal>automatic</literal> for targets that are created
    as a side-effect of Bakefile's processing (e.g. object file targets).
    The targets are sorted in generated makefile according to the category:
    <literal>all</literal> target is first, followed by
    <literal>normal</literal> targets and <literal>automatic</literal> targets
    are last.
  </para>

  <note id="pseudotargets">
    <title>Pseudo targets</title>
    <para>
      Some rules don't declare real targets but so-called
      <emphasis>pseudo targets</emphasis>. Pseudo targets are processed as
      standard targets, but they don't appear in the generate makefile, have
      no action associated with them and can't depend on any other target or
      be dependency of another target. They are used as user-friendly means of
      modifying behaviour of other targets. 
      An example of pseudo target is
      <xref linkend="rule.datafiles.data-files"/>.
    </para>
    <para>
      The advantage of pseudo targets is that the <varname>id</varname>
      attribute is not required. The disadvantage is that they can't be
      conditional.
    </para>
  </note>


  <section id="rules">
    <title>Rules</title>
    <para>
      Description of builtin rules and their tags follows. Additional rules
      and tags are defined by modules, see <xref linkend="ch.modules"/>.
    </para>

    <section id="rule.exe" xreflabel="exe">
      <title>exe</title>
      <para>
        Builds a program.
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>

              <row id="tags.exe.app-type">
                <entry role="tagname">app-type</entry>
                <entry>
                  Use this tag to specify whether the executable is console
                  application (<literal>console</literal>) or windowed one
                  (<literal>gui</literal>). These two kinds of applications
                  are linked differently on Windows.
                  <programlisting><![CDATA[
<exe id="foo">
  <app-type>gui</app-type>
  <sources>foo.c bar.c</sources>
</exe>
]]></programlisting>
                </entry>
              </row>
              
              <row id="tags.lib.exename">
                <entry role="tagname">exename</entry>
                <entry>
                  Set name of the executable. By default, the name is same as
                  <varname>id</varname>, but it is sometimes useful to use
                  different name to identify the executable in makefiles
                  (<varname>id</varname>) and for created program file
                  (<varname>exename</varname>). Physical filename is
                  deriver from <varname>exename</varname> and format-specific
                  extension (e.g. <literal>.exe</literal> on Windows).
                </entry>
              </row>
              
            </tbody>
          </tgroup>
        </informaltable>
      </para>
    </section>
    
    
    
    <!-- =============================================================== -->
    <!--                               lib                               -->
    <!-- =============================================================== -->

    <section id="rule.lib" xreflabel="lib">
      <title>lib</title>
      <para>
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>

              <row id="tags.lib.libname">
                <entry role="tagname">libname</entry>
                <entry>
                  Set name of the library. By default, the name is same as
                  <varname>id</varname>, but it is sometimes useful to use
                  different name to identify the library in makefiles
                  (<varname>id</varname>) and for created library file
                  (<varname>libname</varname>). This tag does
                  <emphasis>not</emphasis> set physical filename -- that is
                  derived from <varname>libname</varname> and other
                  generator-specific variables.
                  <programlisting><![CDATA[
<lib id="foo">
  <libname>foo$(COMPILER)_$(DBGFLAG)</depends>
  <sources>foo.c bar.c</sources>
</exe>
]]></programlisting>
                </entry>
              </row>
              
            </tbody>
          </tgroup>
        </informaltable>
      </para>
    </section>


    <!-- =============================================================== -->
    <!--                               dll                               -->
    <!-- =============================================================== -->
    
    <section id="rule.dll" xreflabel="dll">
      <title>dll</title>
      <para>
        
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>

              <row id="tags.dll.dllname" xreflabel="dllname">
                <entry role="tagname">dllname</entry>                
                <entry>
                  Similar to <link linkend="tags.lib.libname">libname tag on
                    dll</link>, but it affects the name of shared library/DLL.
                </entry>
              </row>
              
              <row id="tags.dll.libname" xreflabel="libname">
                <entry role="tagname">libname</entry>
                <entry>
                  Similar to <xref linkend="tags.dll.dllname"/>, but used for
                  import library on Windows and .so symlink on Unix.
                </entry>
              </row>
              
              <row id="tags.dll.version" xreflabel="version">
                <entry role="tagname">version</entry>
                <entry>
                </entry>
              </row>
              
              <row id="tags.dll.so_version" xreflabel="so_version">
                <entry role="tagname">so_version</entry>
                <entry>
                </entry>
              </row>
              
              <row id="tags.dll.mac_version" xreflabel="mac_version">
                <entry role="tagname">mac_version</entry>
                <entry>
                </entry>
              </row>
              
              
            </tbody>
          </tgroup>
        </informaltable>

      </para>
    </section>
    
    <!-- =============================================================== -->
    <!--                            module                               -->
    <!-- =============================================================== -->
    
    <section id="rule.module" xreflabel="module">
      <title>module</title>
      <para>
        Builds loadable module (aka plugin). Unlike <xref linkend="rule.dll"/>,
        this one does not create import library on Windows.
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>

              <row id="tags.module.dllname" xreflabel="dllname">
                <entry role="tagname">dllname</entry>           
                <entry>
                  See <xref linkend="tags.dll.dllname"/>.
                </entry>
              </row>
              
            </tbody>
          </tgroup>
        </informaltable>

      </para>
    </section>
    
    
    <!-- =============================================================== -->
    <!--                            phony                                -->
    <!-- =============================================================== -->
    

    <section id="rule.phony" xreflabel="phony">
      <title>phony</title>
      <para>
        This type of target does nothing. It is usually used as convenience
        target together with <link linkend="tag.depends">depends</link> tag to
        easily build set of targets. Standard target <literal>all</literal>
        is an example of phony target.
      </para>
    </section>
    
    
    <!-- =============================================================== -->
    <!--                              action                             -->
    <!-- =============================================================== -->

    <section id="rule.action" xreflabel="action">
      <title>action</title>
      <para>
        This is most generic rule. It allows you to execute arbitrary sequence
        of commands when building the target and can therefore be used to
        extend Bakefile with custom build rules. Note that this rule is not
        platform- and compiler-independent as the rest of rules.
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row id="tags.action.command" xreflabel="command">
                <entry role="tagname">command</entry>
                <entry>
                  <para>
                    Adds command to list of commands to be executed when
                    building the target.
                    <programlisting><![CDATA[
<action id="manual.html">
  <command>docbook2html manual.xml manual.html</command>
</action>
]]></programlisting>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </para>
    </section>



    <!-- =============================================================== -->
    <!--                           subproject                            -->
    <!-- =============================================================== -->

    <section id="rule.subproject" xreflabel="subproject">
      <title>subproject</title>
      <para>
        Declares subproject. Subproject is typically another makefile in a
        subdirectory and is indepent on its parent project. Therefore you
        can't use any variables or refer to targets from parent project in
        subproject.
        <informaltable>
          <tgroup cols='2'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
                <entry>Required/Default value</entry>
              </row>
            </thead>
            <tbody>
              <row id="tags.subproject.dir" xreflabel="dir">
                <entry role="tagname">dir</entry>
                <entry>
                  <para>
                    Directory with subproject -- parent makefile calls
                    makefile in this directory.
                  </para>
                </entry>
                <entry role="default">required</entry>
              </row>
              <row id="tags.subproject.target" xreflabel="target">
                <entry role="tagname">target</entry>
                <entry>
                  <para>
                    Optional argument which specifies what target to build
                    in the subproject.
                  </para>
                </entry>
                <entry role="default"><literal>all</literal></entry>
              </row>
              <row id="tags.subproject.installable" xreflabel="installable">
                <entry role="tagname">installable</entry>
                <entry>
                  <para>
                    Whether <command>make install</command> (if supported by
                    the format) should descend into subproject's directory.
                    The value can only be <literal>yes</literal> or
                    <literal>no</literal> and must be constant expression.
                  </para>
                </entry>
                <entry role="default"><literal>yes</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </para>
    </section>












    
    <section>
      <title>Common tags</title>
      <para>
        These tags are always available, it is not neccessary to load any
        <link linkend="ch.modules">module</link> to use them.

        <informaltable>
          <tgroup cols='3'>
            <thead>
              <row>
                <entry>Tag</entry>
                <entry>Description</entry>
                <entry>Availability</entry>
              </row>
            </thead>
            <tbody>
        
              <row id="tag.depends" xreflabel="depends">
                <entry role="tagname">depends</entry>
                <entry>
                  <para>
                    This tag is used to express target's dependency on other
                    targets. All targets in <function>depends</function> tag
                    must be built prior to building this target. The value is
                    whitespace-separated list of target IDs. It is an error to
                    specify nonexistent target here.
                  </para>
                  <para>
                    Note that <xref linkend="tag.library"/> tag implies
                    <function>depends</function>.
                  </para>
                  <programlisting><![CDATA[
<copy-file id="setup">
  <source>setup0.h</source>
  <dest>setup.h</dest>
</copy-file>

<exe id="app">
  <depends>setup</depends>
  <sources>app.c</sources>
  <define>USE_SETUP_H</define>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">all rules</entry>
              </row>
              
              <row id="tag.objects-depend" xreflabel="objects-depend">
                <entry role="tagname">objects-depend</entry>
                <entry>
                  <para>
                    Same as <xref linkend="tag.depends"/>, except the dependency
                    is added to all <emphasis>object files</emphasis> used
                    to build the target instead of to the target itself.
                    This is useful e.g. in combination with precompiled
                    headers (which must be generated before any source file
                    is compiled) or when a commonly used header file is
                    generated by the makefile.
                  </para>
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tags.lib.dirname">
                <entry role="tagname">dirname</entry>
                <entry>
                  Set name of directory where the target will be created.
                  <varname>BUILDDIR</varname> is used by default.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.dependency-of" xreflabel="dependency-of">
                <entry role="tagname">dependency-of</entry>
                <entry>
                  Mark the target as dependency of target specified in tag's
                  value. The value must be ID of existing target. This tag
                  is opposite of <xref linkend="tag.depends"/>. Following two
                  examples have identical effect:
                  <programlisting><![CDATA[
<exe id="setup"></exe>
<exe id="app">
  <depends>setup</depends>
</exe>
]]></programlisting><programlisting><![CDATA[
<exe id="app"></exe>
<exe id="setup">
  <dependency-of>app</dependency-of>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">all</entry>
              </row>


              
              <row id="tag.sources" xreflabel="sources">
                <entry role="tagname">sources</entry>
                <entry>
                  Specify source files used to build the target.
                  <programlisting><![CDATA[
<exe id="app">
  <sources>app.c</sources>
  <sources>utils.c utils2.c</sources>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>

      
      
              <row id="tag.include" xreflabel="include">
                <entry role="tagname">include</entry>
                <entry>
                  Add directory where the compiler should look for headers.
                  Calls <xref linkend="tag.res-include"/> with same value.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
      
      
              <row id="tag.define" xreflabel="define">
                <entry role="tagname">define</entry>
                <entry>
                  Define C preprocessor macro.
                  The value may be empty, in which case no flag is added.
                  Calls <xref linkend="tag.res-define"/> with same value.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
      
      
              <row id="tag.sys-lib" xreflabel="sys-lib">
                <entry role="tagname">sys-lib</entry>
                <entry>
                  Link against specified library installed in the system. Note
                  that this is <emphasis>not</emphasis> meant for linking in
                  libraries that were built by the same makefile, use
                  <xref linkend="tag.library"/> for that. This command links
                  against a library installed in the system or provided by the
                  compiler and corresponds to the <literal>-l</literal> switch
                  of Unix compilers.
              <programlisting><![CDATA[
<exe id="png2bmp">
  <sources>png2bmp.c</sources>
  <sys-lib>png</sys-lib>
  <sys-lib>z</sys-lib>
</exe>
]]></programlisting>
                  Library name may be empty. Only one library may be specified
                  as argument, following usage is incorrect:
              <programlisting><![CDATA[
<exe id="png2bmp">
  <sources>png2bmp.c</sources>
  <sys-lib>png z</sys-lib> <!-- INCORRECT -->
</exe>
]]></programlisting>
                  Note that the name of library in this tag is
                  <emphasis>not</emphasis> filename and must not include
                  paths; use <xref linkend="tag.lib-path"/> to specify
                  library search path.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>

              
              
              <row id="tag.lib-path" xreflabel="lib-path">
                <entry role="tagname">lib-path</entry>
                <entry>
                  Add directory where to look for
                  <link linkend="tag.sys-lib">system libraries</link>.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
      
              
              
              
              <row id="tag.library" xreflabel="library">
                <entry role="tagname">library</entry>
                <entry>
                  Link against library compiled by this makefile. The value
                  passed to this tag must be name of existing target. Compare
                  <xref linkend="tag.sys-lib"/>.
                  <programlisting><![CDATA[
<lib id="mylib">
  <sources>lib1.c lib2.c</sources>
</lib>
<exe id="myapp">
  <sources>main.c</sources>
  <library>mylib</library>
  <sys-lib>X11</sys-lib>
  <sys-lib>GL</sys-lib>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
      
              
              <row id="tag.optimize" xreflabel="optimize">
                <entry role="tagname">optimize</entry>
                <entry>
                  Set compiler's optimization level. May be one of
                  <literal>off</literal> (no optimization),
                  <literal>speed</literal> (generate fastest code) or
                  <literal>size</literal> (smallest code).
                  <programlisting><![CDATA[
<set var="OPTIMIZE_FLAG">
  <if cond="BUILD=='release'">speed</if>
  <if cond="BUILD=='debug'">off</if>
</set>
<exe id="myapp">
  <optimize>$(OPTIMIZE_FLAG)</optimize>
  <sources>main.c</sources>
  <sys-lib>GL</sys-lib>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              <row id="tag.debug-info" xreflabel="debug-info">
                <entry role="tagname">debug-info</entry>
                <entry>
                  Enable or disable debugging information. Can be either
                  <literal>on</literal> or <literal>off</literal>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              <row id="tag.debug-runtime-libs" xreflabel="debug-runtime-libs">
                <entry role="tagname">debug-runtime-libs</entry>
                <entry>
                  Enable or disable linking against debug version of C runtime.
                  Can be either <literal>on</literal> or <literal>off</literal>
                  and <emphasis>must</emphasis> appear after
                  <xref linkend="tag.debug-info"/>. If not specified, then
                  debug runtime libraries are used if and only if
                  <xref linkend="tag.debug-info"/> was set to
                  <literal>on</literal>. Note that this tag has effect only
                  with Visual C++; other compilers respect only
                  <xref linkend="tag.debug-info"/>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.arch" xreflabel="arch">
                <entry role="tagname">arch</entry>
                <entry>
                  Set target CPU architecture. Note that this is not portable
                  and should be avoided if possible. Accepted values are
                  <literal>i[3456]86</literal>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>


              <row id="tag.threading" xreflabel="threading">
                <entry role="tagname">threading</entry>
                <entry>
                  Use <literal>multi</literal> to enable and
                  <literal>single</literal> to disable multithreading in the
                  application. This affects what libraries are linked into
                  executable on some platforms.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.warnings" xreflabel="warnings">
                <entry role="tagname">warnings</entry>
                <entry>
                  Sets warnings level for C/C++ compiler. Possible values
                  are <literal>no</literal>, <literal>default</literal>
                  and <literal>max</literal>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>


              <row id="tag.precomp-headers" xreflabel="precomp-headers">
                <entry role="tagname">precomp-headers</entry>
                <entry>
                  Can be <literal>on</literal> or <literal>off</literal>,
                  enables or disables use of precompiled headers with
                  compilers that support them.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.cxx-rtti" xreflabel="cxx-rtti">
                <entry role="tagname">cxx-rtti</entry>
                <entry>
                  Enable or disable RTTI when compiling C++ sources. Can be either
                  <literal>on</literal> or <literal>off</literal>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.cxx-exceptions" xreflabel="cxx-exceptions">
                <entry role="tagname">cxx-exceptions</entry>
                <entry>
                  Enable or disable C++ exceptions handling. Can be either
                  <literal>on</literal> or <literal>off</literal>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.precomp-headers-file"
                xreflabel="precomp-headers-file">
                <entry role="tagname">precomp-headers-file</entry>
                <entry>
                  Use this tag to fine-tune where precompiled headers are
                  stored. The compiler must support this and the value passed
                  to <function>precomp-headers-file</function> can be modified
                  by Bakefile, e.g. by apending <literal>.pch</literal>
                  extension to it.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              <row>
                <entry role="tagname">
                  <para id="tag.cflags">cflags</para>
                  <para id="tag.cxxflags">cxxflags</para>
                  <para id="tag.cppflags">cppflags</para>
                </entry>
                <entry>
                  Add <emphasis>compiler dependent</emphasis> compilation
                  flags to compiler flags.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row>
                <entry role="tagname">
                  <para id="tag.ldflags" xreflabel="ldflags">ldflags</para>
                </entry>
                <entry>
                  Add <emphasis>linker dependent</emphasis>
                  flags for the linker.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row>
                <entry role="tagname">
                  <para id="tag.ldlibs">ldlibs</para>
                </entry>
                <entry>
                  Same as <xref linkend="tag.ldflags"/>, but adds the flags
                  <emphasis>after</emphasis> all flags specified using
                  <function>ldflags</function>. This is useful when resolving
                  command line order problems that gcc is prone to.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
              
              
              <row id="tag.win32-res" xreflabel="win32-res">
                <entry role="tagname">win32-res</entry>
                <entry>
                  Sets win32 resource (.rc) file for executable or DLL.
                  The tag does nothing on platforms other than Windows.
                  Compilation of the resource respects 
                  <xref linkend="tag.define"/> and 
                  <xref linkend="tag.include"/> tags on the target,
                  as well as their resource specific counterparts
                  <xref linkend="tag.res-define"/> and
                  <xref linkend="tag.res-include"/>.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
              
              
              <row id="tag.mac-res" xreflabel="mac-res">
                <entry role="tagname">mac-res</entry>
                <entry>
                  Sets Mac resource (.r) file for executable or DLL.
                  The tag does nothing on platforms other than Mac.
                  Compilation of the resource respects 
                  <xref linkend="tag.define"/> and 
                  <xref linkend="tag.include"/> tags on the target,
                  as well as their resource specific counterparts
                  <xref linkend="tag.res-define"/> and
                  <xref linkend="tag.res-include"/>.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
              
              
              <row id="tag.res-include" xreflabel="res-include">
                <entry role="tagname">res-include</entry>
                <entry>
                  Similar to <xref linkend="tag.include"/>, but applies only
                  to resources (<xref linkend="tag.mac-res"/>,
                  <xref linkend="tag.win32-res"/>) and not to C/C++ sources.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
      
      
              <row id="tag.res-define" xreflabel="res-define">
                <entry role="tagname">res-define</entry>
                <entry>
                  Similar to <xref linkend="tag.define"/>, but applies only
                  to resources (<xref linkend="tag.mac-res"/>,
                  <xref linkend="tag.win32-res"/>) and not to C/C++ sources.
                </entry>
                <entry role="availability">exe, dll, module</entry>
              </row>
              
              
              <row id="tag.clean-files" xreflabel="clean-files">
                <entry role="tagname">clean-files</entry>
                <entry>
                  Adds files to list of files that are cleaned when
                  <command>make clean</command> is run -- i.e. files created
                  while building the target.
                </entry>
                <entry role="availability">all</entry>
              </row>
              
              
              
              <row id="tag.install-to" xreflabel="install-to">
                <entry role="tagname">install-to</entry>
                <entry>
                  If used, then the target is installed into directory
                  specified as tag's value by <command>make install</command>.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              <row id="tag.install-if" xreflabel="install-if">
                <entry role="tagname">install-if</entry>
                <entry>
                  Install (see <xref linkend="tag.install-to"/>
                  the target conditionally. The value must be well-formed
                  condition.
                  <programlisting><![CDATA[
<option name="INSTALL_HELLO">
  <values>0,1</values>
  <default-value>1</default-value>
</option>
<exe id="hello">
  <sources>hello.c</sources>
  <install-to>$(BINDIR)</install-to>
  <install-if>INSTALL_HELLO=='1'</install-if>
</exe>
]]></programlisting>
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
              
              
              
              <row id="tag.postlink-command" xreflabel="postlink-command">
                <entry role="tagname">postlink-command</entry>
                <entry>
                  Use this tag to specify command(s) that must be executed
                  after the target is linked. This can be used to e.g. add
                  resources or strip debugging information.
                </entry>
                <entry role="availability">exe, dll, module, lib</entry>
              </row>
        
      
      
            </tbody>
          </tgroup>
        </informaltable>
              
              
        
        
        <note>
          <title>Autoconf Note</title>
          <para>
            Many configuration options listed above are not supported by the
            Autoconf format (e.g. <xref linkend="tag.optimize"/>,
            <xref linkend="tag.debug-info"/> or <xref linkend="tag.arch"/>.
            This is because <filename>configure</filename> is used to find
            appropriate compiler flags.
          </para>
        </note>

      </para>

    </section>  
  </section>
  
</chapter>
