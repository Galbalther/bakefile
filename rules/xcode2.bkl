<?xml version="1.0" ?>
<!--

  This file is part of Bakefile (http://www.bakefile.org)

  Copyright (C) 2005-2007 David F. Elliott, Kevin Ollivier

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

  $Id$

-->
<makefile>
    <option name="INSTALL">
        <default-value>install</default-value>
        <description>'install' program location</description>
    </option>
    <set var="COMPILER">gcc</set>
    <set var="TOOLSET">unix</set>
    <include file="makefile_defs_unix.bkl"/>
    <set var="PLATFORM_MAC">1</set>
    <set var="PLATFORM_MACOSX">1</set>
    <set var="FORMAT_SUPPORTS_CONDITIONS">0</set>
    <set var="FORMAT_HAS_MAKE_INSTALL">0</set>
    <set var="FORMAT_SUPPORTS_ACTIONS">1</set>
    <set var="FORMAT_SUPPORTS_SUBPROJECTS">0</set>  <!-- FIXME: is this true? -->

    <!-- =============================================================== -->
    <!--                       Compiler options:                         -->
    <!-- =============================================================== -->

    <option name="CC">
        <default-value>$(__DEFAULT_CC)</default-value>
        <description>
            C compiler
        </description>
    </option>
    <option name="CXX">
        <default-value>$(__DEFAULT_CXX)</default-value>
        <description>
            C++ compiler
        </description>
    </option>
    <option name="CFLAGS">
        <default-value>$(__DEFAULT_CFLAGS)</default-value>
        <description>
            Standard flags for CC
        </description>
    </option>
    <option name="CXXFLAGS">
        <default-value>$(__DEFAULT_CXXFLAGS)</default-value>
        <description>
            Standard flags for C++
        </description>
    </option>
    <option name="CPPFLAGS">
        <default-value>$(__DEFAULT_CPPFLAGS)</default-value>
        <description>
            Standard preprocessor flags (common for CC and CXX)
        </description>
    </option>
    <option name="LDFLAGS">
        <default-value>$(__DEFAULT_LDFLAGS)</default-value>
        <description>
            Standard linker flags
        </description>
    </option>

    <!-- =============================================================== -->
    <!--                     Rules & tags definitions:                   -->
    <!-- =============================================================== -->

    <define-rule name="__any">
        <template>
            <set var="_targetname">$(id)</set>
            <set var="_sources"></set>
        </template>
        <define-tag name="dependency-of">
            <modify-target target="$(value)">
                <depends>$(id)</depends>
            </modify-target>
        </define-tag>
        <define-tag name="depends">
        </define-tag>
    </define-rule>
    <define-rule name="phony" extends="__any">
        <template>
            <set var="_kind">phony</set>
        </template>
    </define-rule>
    <define-rule name="action" extends="__any">
        <template>
            <set var="_kind">action</set>
            <set var="_commands"></set>
        </template>
        <define-tag name="command">
            <set var="_commands" append="1">$(value)\n</set>
        </define-tag>
        <define-tag name="is-phony" />
    </define-rule>
    <define-rule name="subproject" extends="action">
        <template>
            <set var="_kind">aggregate_dependency</set>
        </template>
        <define-tag name="dir" />
        <define-tag name="installable" />
    </define-rule>

    <define-rule name="__compiled" extends="__any">
        <template>
            <set var="_kind">binary_product</set>
            <set var="_xcode_target_group"></set>
            <set var="_defines"></set>
            <set var="_includes"></set>
            <set var="_cxx_rtti"></set>
            <set var="_cxx_exceptions"></set>
            <set var="_debug_info"></set>
            <set var="_optimize"></set>
            <set var="_cflags"></set>
            <set var="_cxxflags"></set>
            <set var="_cppflags"></set>
            <set var="_lib_path"></set>
            <set var="_sys_libs"></set>
            <set var="_warnings"></set>
            <set var="_ldlibs"></set>
            <set var="_ldflags"></set>
            <set var="_pic"></set>
            <set var="_dirname"></set>
            <set var="_productname"></set>
            <set var="_deps"></set>
            <set var="_use_pch"></set>
            <set var="_pch_header"></set>
            <set var="_macvercur"></set>
            <set var="_macvercompat"></set>
            <set var="_postlink_command"></set>
        </template>
        <define-tag name="debug-info">
            <set var="_debug_info">$(value)</set>
        </define-tag>
        <define-tag name="debug-runtime-libs"/>
        <define-tag name="optimize">
            <set var="_optimize">$(value)</set>
        </define-tag>
        <define-tag name="threading" />
        <define-tag name="runtime-libs" />
        <define-tag name="cxx-rtti">
            <set var="_cxx_rtti">$(value)</set>
        </define-tag>
        <define-tag name="cxx-exceptions">
            <set var="_cxx_exceptions">$(value)</set>
        </define-tag>
        <define-tag name="cflags">
            <set var="_cflags" append="1">$(value)</set>
        </define-tag>
        <define-tag name="cxxflags">
            <set var="_cxxflags" append="1">$(value)</set>
        </define-tag>
        <!-- 
             I couldn't find any Xcode setting for CPPFLAGS, the closest it has
             is GCC_PREPROCESSOR_DEFINITIONS, but that assumes each item is a define.
             Is this an appropriate solution, or should we look at other routes? 
        -->
        <define-tag name="cppflags">
            <cflags>$(value)</cflags>
            <cxxflags>$(value)</cxxflags>
        </define-tag>
        <define-tag name="define">
            <set var="_defines" append="1">$(value)</set>
        </define-tag>
        <define-tag name="dirname">
            <set var="_dirname">$(value)</set>
        </define-tag>
        <define-tag name="libname">
            <set var="_productname">$(value)</set>
        </define-tag>
        <define-tag name="install-to" />
        <define-tag name="install-if" />
        <define-tag name="pic">
            <set var="_pic">$(value)</set>
        </define-tag>
        <define-tag name="include">
            <set var="_includes" append="1">$(value)</set>
        </define-tag>
        <define-tag name="sources">
            <set var="_sources" append="1">$(value)</set>
        </define-tag>
        <define-tag name="lib-path">
            <set var="_lib_path" append="1">$(value)</set>
        </define-tag>
        <define-tag name="warnings">
            <set var="_warnings">$(value)</set>
        </define-tag>
        <define-tag name="sys-lib">
            <ldlibs>-l$(value)</ldlibs>
        </define-tag>
        <define-tag name="ldlibs">
            <set var="_ldlibs" append="1">$(value)</set>
        </define-tag>
        <define-tag name="ldflags">
            <set var="_ldflags">$(value)</set>
        </define-tag>
        <define-tag name="depends">
            <set var="_deps" append="1">$(value)</set>
        </define-tag>
        <define-tag name="library">
            <depends>$(value)</depends>
            <ldlibs>-l$(value)</ldlibs>
        </define-tag>
        <define-tag name="postlink-command">
            <set var="_postlink_command">$(value)</set>
        </define-tag>


        <define-tag name="precomp-headers">
            <set var="_use_pch">$(value)</set>
        </define-tag>
        
        <define-tag name="precomp-headers-header">
            <set var="_pch_header">$(value)</set>
        </define-tag>
        
        <!-- NB: AFAICT, Xcode doesn't give fine-tuned control over PCH,
             so I'm not sure we can implement these settings. -->
        <define-tag name="precomp-headers-location"/>
        <define-tag name="precomp-headers-file"/>
        <define-tag name="precomp-headers-gen"/>
        <define-tag name="precomp-headers-exclude"/>

        <define-tag name="res-define"/>
        <define-tag name="res-include"/>
        
    </define-rule>

    <define-rule name="_dll" extends="__compiled">
        <template>
            <set var="_productType">com.apple.product-type.library.dynamic</set>
            <set var="_explicitFileType">compiled.mach-o.dylib</set>
            <set var="_productname" eval="0">lib$(_libname)</set>
        </template>
        <define-tag name="dllname">
            <set var="_productname">$(value)</set> 
        </define-tag>
    </define-rule>
    <define-rule name="dll" extends="_dll">
        <template>
            <libname>$(id)</libname>
        </template>
        <define-tag name="version"/>
        <define-tag name="so_version"/>
        <define-tag name="mac_version">
            <set var="_macvercur">$(value)</set>
            <set var="_macvercompat">$('.'.join(value.split('.')[0:2]))</set>
        </define-tag>
    </define-rule>
    <define-rule name="module" extends="_dll">
        <template>
            <libname>$(id)</libname>
        </template>
    </define-rule>
    <define-rule name="lib" extends="__compiled">
        <template>
            <set var="_productType">com.apple.product-type.library.static</set>
            <set var="_explicitFileType">archive.ar</set>
            <set var="_productname" eval="0">lib$(_libname)</set>
            <libname>$(id)</libname>
        </template>
    </define-rule>
    <define-rule name="exe" extends="__compiled">
        <template>
            <set var="_productname" eval="0">$(_exename)</set>
            <exename>$(id)</exename>
            <app-type>console</app-type>
        </template>
        <define-tag name="app-type">
            <set var="_productType">
                $(substituteFromDict(value,
                {'console':'com.apple.product-type.tool',
                 'gui':'com.apple.product-type.application'}))
            </set>
            <set var="_explicitFileType">
                $(substituteFromDict(value,
                {'console':'compiled.mach-o.executable',
                 'gui':'wrapper.application'}))
            </set>
        </define-tag>
        <define-tag name="exename">
            <set var="_exename">$(value)</set>
        </define-tag>
    </define-rule>

    <phony id="all" category="all" />

    <!-- =============================================================== -->
    <!--                      resources:                                 -->
    <!-- =============================================================== -->

    <!-- do nothing by default: -->
    <define-tag name="win32-res" rules="exe,dll,module"/>
    <define-tag name="mac-res" rules="exe,dll,module"/>
    <define-tag name="symbian-res" rules="exe,dll,module"/>
    
    <output file="$(OUTPUT_FILE)" writer="xcode2.py" />
</makefile>
