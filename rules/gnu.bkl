<?xml version="1.0" ?>
<!-- $Id$ -->

<makefile>
    
    <set var="COMPILER">gcc</set>
    <set var="MAKEFILE_SYNTAX">gnu</set>
    
    <set var="PLATFORM_UNIX">1</set>
    <set var="TOOLSET">unix</set>

    
    <option name="INSTALL">
        <default-value>install</default-value>
        <description>'install' program location</description>
    </option>
 
    <option name="prefix">
        <default-value>/usr/local</default-value>
        <description>
            Location where the package is installed by 'make install'
        </description>
    </option>

    <set var="PREFIX">$(prefix)</set>
    
    <include file="makefile.bkl"/>
    
    <!-- We don't support sonames here, so libname==dllname: -->
    <tag-info name="libname" position="after:dllname"/> 
    <define-tag name="libname" rules="dll">
        <set var="__dllname">$(value)</set>
    </define-tag>

    <!-- =============================================================== -->
    <!--                   Compiler-specific tags:                       -->
    <!-- =============================================================== -->
    
    <define-tag name="cppflags-gcc" rules="exe,lib,dll,module">
        <cppflags>$(value)</cppflags>
    </define-tag>
    <define-tag name="cflags-gcc" rules="exe,lib,dll,module">
        <cflags>$(value)</cflags>
    </define-tag>
    <define-tag name="cxxflags-gcc" rules="exe,lib,dll,module">
        <cxxflags>$(value)</cxxflags>
    </define-tag>
    <define-tag name="ldflags-gcc" rules="exe,dll,module">
        <ldflags>$(value)</ldflags>
    </define-tag>
    
    <define-tag name="cppflags-unix" rules="exe,lib,dll,module">
        <cppflags>$(value)</cppflags>
    </define-tag>
    <define-tag name="cflags-unix" rules="exe,lib,dll,module">
        <cflags>$(value)</cflags>
    </define-tag>
    <define-tag name="cxxflags-unix" rules="exe,lib,dll,module">
        <cxxflags>$(value)</cxxflags>
    </define-tag>
    <define-tag name="ldflags-unix" rules="exe,dll,module">
        <ldflags>$(value)</ldflags>
    </define-tag>

    <!-- =============================================================== -->
    <!--                         "make clean":                           -->
    <!-- =============================================================== -->

    <action id="clean" template="__phony">
        <set var="__builddir" eval="0">$(BUILDDIR)</set>
        <command>            
            $(RM) $(__builddir)/*$(OBJEXT) 
            $(RM) $(__builddir)/*.d
        </command>
    </action>
    
    <!-- =============================================================== -->
    <!--                            output:                              -->
    <!-- =============================================================== -->
    
    <!-- see format_features.bkl for explanation: -->
    <set var="FORMAT_OUTPUT_VARIABLES">
        __targetdir __targetname __deps __command __is_phony
    </set>

    <output file="$(OUTPUT_FILE)" writer="gnumake.empy"/>
    
    <if cond="OPTIONS_FILE!='' and WRITE_OPTIONS_FILE=='1'">
    <output file="$(os.path.join(os.path.dirname(OUTPUT_FILE), OPTIONS_FILE))"
            writer="gnumake-opts.empy"/>
    </if>

</makefile>
