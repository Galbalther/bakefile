<?xml version="1.0" ?>
<!-- $Id$ -->

<makefile>
    
    <!-- =============================================================== -->
    <!--                       Configuration:                            -->
    <!-- =============================================================== -->

    <option name="SHARED_LD_CC"/>
    <option name="SHARED_LD_CXX"/>
    <option name="SHARED_LD_MODULE_CC"/>
    <option name="SHARED_LD_MODULE_CXX"/>
    <option name="LIBPREFIX"/>
    <option name="SO_SUFFIX"/>
    <option name="SO_SUFFIX_MODULE"/>
    <option name="EXEEXT"/>
    <option name="LN_S"/>
    <option name="RESCOMP"/>
    <option name="SETFILE"/>
    <option name="PIC_FLAG"/>
    <option name="USE_SOVERSION"><values>0,1</values></option>
    <option name="USE_SOVERLINUX"><values>0,1</values></option>
    <option name="USE_SOVERSOLARIS"><values>0,1</values></option>
    <option name="USE_SOSYMLINKS"><values>0,1</values></option>
    <option name="USE_MACVERSION"><values>0,1</values></option>
    <option name="SONAME_FLAG"/>
    <option name="STRIP"/>
    <option name="NM"/>
    <option name="INSTALL"/>
    <option name="INSTALL_PROGRAM"/>
    <option name="INSTALL_DATA"/>
    <option name="INSTALL_DIR"/>
    <option name="DEPS_TRACKING"><values>0,1</values></option>
    <option name="GCC_PCH"><values>0,1</values></option>

    <!-- Platforms: -->
    <option name="PLATFORM_UNIX"/>
    <option name="PLATFORM_WIN32"/>
    <option name="PLATFORM_MSDOS"/>
    <option name="PLATFORM_MAC"/>
    <option name="PLATFORM_MACOSX"/>
    <option name="PLATFORM_OS2"/>
    
    <option name="srcdir" never_empty="1"/>
    <option name="top_srcdir"/>
    <option name="top_builddir"/>

    <option name="prefix"/>
    <option name="exec_prefix"/>
    <option name="bindir"/>
    <option name="libdir"/>
    <option name="datadir"/>
    <option name="includedir"/>
    <set var="PREFIX">$(prefix)</set>
    <set var="BINDIR">$(bindir)</set>
    <set var="LIBDIR">$(libdir)</set>
    <set var="DATADIR">$(datadir)</set>
    <set var="INCLUDEDIR">$(includedir)</set>
    
    <set var="SRCDIR">$(srcdir)</set>

    <set var="DLLEXT">.$(SO_SUFFIX)</set>
    <set var="DLLEXT_MODULE">.$(SO_SUFFIX_MODULE)</set>
    <option name="DLLPREFIX"/>
    <option name="DLLPREFIX_MODULE"/>

    <set var="DLLIMPEXT">
        <if cond="PLATFORM_WIN32=='1'">.a</if>
        <if cond="PLATFORM_WIN32=='0'">$(DLLEXT)</if>
    </set>

    <option name="LDFLAGS_GUI"/>   
    <set var="__FLAG_EXE_GUI">$(LDFLAGS_GUI)</set>

    <set var="DLL_CFLAGS">$(PIC_FLAG)</set>
    <set var="__DLL_LINKER_CC" eval="0">$(SHARED_LD_CC)</set>
    <set var="__DLL_LINKER_CXX" eval="0">$(SHARED_LD_CXX)</set>
    <set var="__MODULE_LINKER_CC" eval="0">$(SHARED_LD_MODULE_CC)</set>
    <set var="__MODULE_LINKER_CXX" eval="0">$(SHARED_LD_MODULE_CXX)</set>


    <!-- List of additional checks that bakefile.m4 should run: -->
    <set var="AUTOCONF_CHECKS"/>
    
    <!-- =============================================================== -->
    <!--                     C/C++ dependency tracking:                  -->
    <!-- =============================================================== -->

    <set var="CCC" eval="0">
        <if cond="DEPS_TRACKING=='1'">$(top_builddir)./bk-deps $(CC)</if>
        <if cond="DEPS_TRACKING=='0'">$(CC)</if>
    </set>
    <set var="CXXC" eval="0">
        <if cond="DEPS_TRACKING=='1'">$(top_builddir)./bk-deps $(CXX)</if>
        <if cond="DEPS_TRACKING=='0'">$(CXX)</if>
    </set>
    
    <!-- =============================================================== -->
    <!--                    Load makefile meta-backend:                  -->
    <!-- =============================================================== -->

    <!-- gcc >= 3.4 precompiled headers support, see also below: -->
    <template id="__autoconf_baset">
        <set var="__pch_header"/>
        <set var="__pch_file"/>
    </template>
    <set var="__macexe_baset">__autoconf_baset</set>
    <set var="__dll_baset">__autoconf_baset</set>
    <set var="__lib_baset">__autoconf_baset</set>
    
    <include file="makefile_macres.bkl"/>
    <set var="__exe_baser">__macexe</set>

    <include file="unixlike.bkl"/>
    <!-- autoconf can be used to compile win32 apps, too: -->
    <include file="makefile_mingw.bkl"/>    
    <!-- and OS/2 as well: -->
    <include file="makefile_os2.bkl"/>    
    
    <!-- =============================================================== -->
    <!--                   Compiler-specific tags:                       -->
    <!-- =============================================================== -->
    
    <define-tag name="cppflags-unix" rules="exe,lib,dll,module">
        <cppflags>$(value)</cppflags>
    </define-tag>
    <define-tag name="cflags-unix" rules="exe,lib,dll,module">
        <cflags>$(value)</cflags>
    </define-tag>
    <define-tag name="cxxflags-unix" rules="exe,lib,dll,module">
        <cxxflags>$(value)</cxxflags>
    </define-tag>
    <define-tag name="ldflags-unix" rules="exe,dll,module">
        <ldflags>$(value)</ldflags>
    </define-tag>
    

    <!-- =============================================================== -->
    <!--               Shared libs/DLLs handling:                        -->
    <!-- =============================================================== -->

    <set var="__so_symlinks_cmd"/> <!-- default value -->
    <set var="__so_symlinks_inst_cmd"/> <!-- default value -->
    <set var="__mac_instname"/> <!-- default value -->

    <define-tag name="so_version" rules="dll">
        <set var="__soversion1">$(value.split('.')[0])</set>
        <set var="__soversion2">$(value.split('.')[1])</set>
        <set var="__soversion3">$(value.split('.')[2])</set>

        <set var="__linkname1">$(__linkname)</set>
        
        <set var="__targetsuf2">
            <if cond="USE_SOVERSION=='1' and PLATFORM_MACOSX=='0'">
                $(DLLEXT).$(__soversion1)
            </if>
            <if cond="USE_SOVERSION=='1' and PLATFORM_MACOSX=='1'">
                .$(__soversion1)$(DLLEXT)
            </if>
            <if cond="USE_SOVERSION=='0'">$(DLLEXT)</if>
        </set>
        <set var="__linkname2" eval="0">
            $(DLLPREFIX)$(__dllname)$(__targetsuf2)
        </set>
        
        <set var="__targetsuf3">
            <if cond="USE_SOVERSION=='1' and PLATFORM_MACOSX=='0'">
                $(DLLEXT).$(__soversion1).$(__soversion2).$(__soversion3)
            </if>
            <if cond="USE_SOVERSION=='1' and PLATFORM_MACOSX=='1'">
                .$(__soversion1).$(__soversion2).$(__soversion3)$(DLLEXT)
            </if>
            <if cond="USE_SOVERSION=='0'">$(DLLEXT)</if>
        </set>
        <set var="__targetname" eval="0">
            $(DLLPREFIX)$(__dllname)$(__targetsuf3)
        </set>
        
        <set var="__soname_flags">
            <if cond="USE_SOVERLINUX=='1'"> <!-- Linux -->
                $(SONAME_FLAG)$(__linkname2)
            </if>
            <if cond="USE_SOVERSOLARIS=='1'"> <!-- Solaris -->
                $(SONAME_FLAG)$(__targetname)
            </if>
        </set>
        <ldflags>$(__soname_flags)</ldflags>

        <set var="__so_symlinks_cmd">
            <if cond="USE_SOSYMLINKS=='1'">
                (cd $(__targetdir);
                $(RM) $(__linkname1) $(__linkname2);
                $(LN_S) $(__targetname) $(__linkname2);
                $(LN_S) $(__linkname2) $(__linkname1))
            </if>
        </set>
        <set var="__so_symlinks_inst_cmd">
            <if cond="USE_SOSYMLINKS=='1'">
                $(RM) $(__linkname1) $(__linkname2);
                $(LN_S) $(__targetname) $(__linkname2);
                $(LN_S) $(__linkname2) $(__linkname1)
            </if>
        </set>
        <__command>$(LF)$(__so_symlinks_cmd)</__command>
    
        <set var="__mac_instname">$(__linkname2)</set>
   
        <clean-files>
            $(ref('__targetdir',id))$(ref('__linkname1', id)) $(ref('__targetdir',id))$(ref('__linkname2', id))
        </clean-files>       
    </define-tag>
    
    <define-tag name="mac_version" rules="dll">
        <set var="__macvercur">$(value)</set>
        <set var="__macvercompat">$('.'.join(value.split('.')[0:2]))</set>
        <set var="__macver">
            <if cond="PLATFORM_MACOSX=='1'">
-compatibility_version $(__macvercompat) -current_version $(__macvercur)
            </if>
        </set>
        <ldflags>$(__macver)</ldflags>
    </define-tag>

    <define-tag name="install-to" rules="dll">
        <set var="__macinstname" eval="0">
            $(ifthenelse(__mac_instname=='',ref('__targetname',id),ref('__mac_instname',id)))
        </set>
        <set var="__macinstnamecmd">
            <if cond="PLATFORM_MACOSX=='1'">
                -install_name $(value)/$(__macinstname)
            </if>
        </set>
        <ldflags>$(__macinstnamecmd)</ldflags>

        <modify-target target="install_$(id)">
            <command>(cd $(value) ; $(ref('__so_symlinks_inst_cmd',id)))</command>
        </modify-target>
    </define-tag>
    
    <define-tag name="libname" rules="dll">
        <set var="__importlib">
            <if cond="PLATFORM_WIN32=='1'">-Wl,--out-implib,$(__targetdir)$(__linkname)</if>
        </set>
        <ldflags>$(__importlib)</ldflags>
    </define-tag>
    
    
    <!-- =============================================================== -->
    <!--              GCC >= 3.4 precompiled headers support:            -->
    <!-- =============================================================== -->

    <set var="__added_pch_ac_check">0</set>

    <tag-info name="precomp-headers-file"
              position="before:precomp-headers-header"/>
    <tag-info name="precomp-headers-header"
        position="before:precomp-headers"/>
    
    <define-tag name="precomp-headers-file" rules="__compiled">
        <set var="__pch_file">$(value)</set>
    </define-tag>
    <define-tag name="precomp-headers-header" rules="__compiled">
        <set var="__pch_header">$(value)</set>
    </define-tag>

    <define-tag name="precomp-headers" rules="__compiled">
        <if cond="value=='on'">
            <if cond="__added_pch_ac_check=='0'">
                <set var="__added_pch_ac_check" scope="global">1</set>
                <set var="AUTOCONF_CHECKS" scope="global" append="1">
                    AC_BAKEFILE_PRECOMP_HEADERS$(LF)
                </set>
            </if>
            
            <set var="__gcc_pch_dir">
                .pch$(addPrefixIfNotEmpty('/', __pch_file))
            </set>
            <set var="__gcc_pch_file">
                $(__gcc_pch_dir)/$(__pch_header).gch
            </set>
            <!-- must look into this directory first: -->
            <set var="PCH_INC">
                <if cond="GCC_PCH=='1'">-I$(__gcc_pch_dir)</if>
            </set> 
            <set var="__cppflags">$(PCH_INC) $(__cppflags)</set>

            <set var="__gcc_pch_cmd" eval="0">
                $(ifthenelse(__uses_cxx,CXX,CC)+' '+ifthenelse(__uses_cxx,
                             '$(%s_CXXFLAGS)' % id.upper(),
                             '$(%s_CFLAGS)' % id.upper()))
            </set>

            <if cond="__gcc_pch_file not in targets">
                <add-target target="$(__gcc_pch_file)"
                            type="action" cond="GCC_PCH=='1'"/>
                <modify-target target="$(__gcc_pch_file)">
                    <command>
                        $(top_builddir)./bk-make-pch $(__gcc_pch_file) $(__pch_header) $(ref("__gcc_pch_cmd",id))
                    </command>
                </modify-target>
            </if> 

            <set var="PCH_DEP">
                <if cond="GCC_PCH=='1'">$(__gcc_pch_file)</if>
            </set> 
            <set var="__deps">$(PCH_DEP) $(__deps)</set>
        </if>
    </define-tag>
    
    
    
    <!-- =============================================================== -->
    <!--                     "make install-strip":                       -->
    <!-- =============================================================== -->

    <action id="install-strip">
        <depends>install</depends>
    </action>
   
    <define-tag name="install-to" rules="dll,exe,module">
        <modify-target target="install-strip">
            <command>$(STRIP) $(value)/$(ref('__targetname',id))</command>
        </modify-target>
    </define-tag>

    <tag-info name="installable" position="before:dir"/>
    
    <define-tag name="installable" rules="subproject">
        <set var="__installable">$(value)</set>
    </define-tag>
    <define-tag name="dir" rules="subproject">
        <modify-target target="install-strip">
            <if cond="__installable!='no'">
                <command>(cd $(value) &amp;&amp; $(DOLLAR)(MAKE) install-strip)</command>
            </if>
        </modify-target>
    </define-tag>
    
    
    <!-- =============================================================== -->
    <!--                         "make clean":                           -->
    <!-- =============================================================== -->

    <action id="clean" template="__phony">
        <set var="__builddir" eval="0">$(BUILDDIR)</set>
        <command>            
            rm -rf $(__builddir)/.deps $(__builddir)/.pch
            $(RM) $(__builddir)/*$(OBJEXT)
        </command>
    </action>
    
    <!-- =============================================================== -->
    <!--                       "make distclean":                         -->
    <!-- =============================================================== -->

    <action id="distclean" template="__phony">
        <depends>clean</depends>
        <command>
            $(RM) configure config.cache config.log config.status bk-deps bk-make-pch shared-ld-sh Makefile
        </command>
    </action>

    
    <!-- =============================================================== -->
    <!--                       Generate output:                          -->
    <!-- =============================================================== -->
    
    <!-- see format_features.bkl for explanation: -->
    <set var="FORMAT_OUTPUT_VARIABLES">
        __targetdir,__targetname,__deps,__command,__is_phony,AUTOCONF_CHECKS
    </set>    
    <set var="FORMAT_NEEDS_OPTION_VALUES_FOR_CONDITIONS">0</set>

    <set var="AUTOCONF_MACROS_FILE">
        $(os.path.join(os.path.dirname(OUTPUT_FILE),'autoconf_inc.m4'))
    </set>

    <output file="$(OUTPUT_FILE)" writer="autoconf.empy"/>

    <if cond="AUTOCONF_MACROS_FILE!=''">
        <output file="$(AUTOCONF_MACROS_FILE)"
                writer="autoconf-macros.empy"
                method="mergeBlocks"/>
    </if>

</makefile>
