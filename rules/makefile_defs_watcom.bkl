<?xml version="1.0" ?>
<!-- $Id$ -->

<makefile>
    
    <include file="win32.bkl"/>
    
    <set var="__DEFINE_ARG">-d</set>
    <set var="__INCLUDE_ARG">-i=</set>
    <set var="__LIB_ARG">%s.lib</set>
    <set var="__LIBDIR_ARG">libpath$(SPACE)</set>

    <set var="__DEFAULT_CC">wcc386</set>
    <set var="__DEFAULT_CXX">wpp386</set>
    <set var="__DEFAULT_CFLAGS"></set>
    <set var="__DEFAULT_CPPFLAGS"></set>
    <set var="__DEFAULT_CXXFLAGS"></set>
    <set var="__DEFAULT_LDFLAGS"></set>
    
    <set var="__LINKER_CC">wlink</set>
    <set var="__LINKER_CXX">wlink</set>
    <set var="__DLL_LINKER_CC">wlink</set>
    <set var="__DLL_LINKER_CXX">wlink</set>
    <set var="__MODULE_LINKER_CC">$(__DLL_LINKER_CC)</set>
    <set var="__MODULE_LINKER_CXX">$(__DLL_LINKER_CXX)</set>

    <!-- basic compiler/linker flags: -->
    <set var="__FLAG_DEBUG_ON">-d2</set>
    <set var="__FLAG_DEBUG_ON_LINKER">debug all</set>
    <set var="__FLAG_DEBUG_OFF">-d0</set>
    <set var="__FLAG_DEBUG_OFF_LINKER"></set>
    <set var="__FLAG_OPTIMIZE_OFF">-od</set>
    <set var="__FLAG_OPTIMIZE_SIZE">-os</set>
    <set var="__FLAG_OPTIMIZE_SPEED">-ot -ox</set>
    <set var="__FLAG_ARCH_I386">-3</set>
    <set var="__FLAG_ARCH_I486">-4</set>
    <set var="__FLAG_ARCH_I586">-5</set>
    <set var="__FLAG_ARCH_I686">-6</set>
    <set var="__FLAG_SINGLE_THREADING_LD"/>
    <set var="__FLAG_MULTI_THREADING_LD"/>
    <set var="__FLAG_SINGLE_THREADING_CPP"/>
    <set var="__FLAG_MULTI_THREADING_CPP"/>
    <set var="__FLAG_WARNINGS_NO"/>
    <set var="__FLAG_WARNINGS_DEFAULT"/>
    <set var="__FLAG_WARNINGS_MAX">-wx</set>
    <!-- NB: we explicitly reference startup function in case it was
             in a library (e.g. wxWindows) in which case wlink would
             optimize it out: -->
    <set var="__FLAG_EXE_CONSOLE">system nt ref 'main_'</set>
    <set var="__FLAG_EXE_GUI">system nt_win ref '_WinMain@16'</set>
    
    <set var="__FLAG_RTTI_ON">-xr</set>
    <set var="__FLAG_RTTI_OFF"></set>
    <set var="__FLAG_EXCEPTIONS_ON">-xs</set>    
    <set var="__FLAG_EXCEPTIONS_OFF"></set>

    
    <!-- rules building blocks: -->
    
    <template id="__commands_templ_C">
        <set var="__deps" append="1">.AUTODEPEND</set>
        <set var="__COMPILE_C_CMD" eval="0">
            $(CC) -zq -fo=$^@ $(__cflags) $&lt;
        </set>
    </template>
    
    <template id="__commands_templ_CXX">
        <set var="__deps" append="1">.AUTODEPEND</set>
        <set var="__COMPILE_CXX_CMD" eval="0">
            $(CXX) -zq -fo=$^@ $(__cxxflags) $&lt;
        </set>
    </template>

    <set var="__exe_baser">__watcom_comp</set>
    <set var="__dll_baser">__watcom_comp</set>
    <set var="__dll_baset">__watcom_dll</set>
    <set var="__lib_baser">__watcom_comp</set>

    <template id="__watcom_dll">
        <cppflags>-bd</cppflags> <!-- DLL target -->
    </template>

    <define-rule name="__watcom_comp">
        <template>
            <set var="__libpath"/>
            <set var="__pch_flag"/>
            <!-- FIXME: get rid of this once tag ordering works!: -->
            <set var="__pch_cppflags" eval="0">$(__pch_flag)</set>
            <!-- FIXME: should be cppflags, temporary fix to make wxWin
                   working!! -->
            <cxxflags>$(__pch_cppflags)</cxxflags>
        </template>
        
        <define-tag name="threading">
            <cppflags>
                $(substituteFromDict(value,{'multi':'-bm','single':''}))
            </cppflags>
        </define-tag>
        
        <define-tag name="lib-path">
            <set var="__libpath" append="1">;$(value)</set>
        </define-tag>
        
        <define-tag name="runtime-libs">
            <cppflags>
                $(substituteFromDict(value, {'static':'', 'dynamic':'-br'}))
            </cppflags>
        </define-tag>
        
        <define-tag name="precomp-headers">
            <set var="__pch_flag">/fh</set>
        </define-tag>
        <define-tag name="precomp-headers-file">
            <set var="__pch_flag">
                $(formatIfNotEmpty('/fh=%s.pch', mkPathPrefix(BUILDDIR)+value))
            </set>
        </define-tag>
    </define-rule>
    

    <template id="__commands_templ">
        <set var="__win32res_flag"/>

        <set var="__lbc_file">$(mkPathPrefix(BUILDDIR))$(id).lbc</set>
        <set var="__LINK_CMD_BASE" eval="0">
            @%create $(__lbc_file)
            @%append $(__lbc_file) option quiet
            @%append $(__lbc_file) name $^@
            @%append $(__lbc_file) option caseexact
            @%append $(__lbc_file) $(__ldflags)
            @for %i in ($(__objects_var)) do @%append $(__lbc_file) file %i
            @for %i in ($(__ldlibs)) do @%append $(__lbc_file) library %i
            @%append $(__lbc_file) $(__win32res_flag)
        </set>        
        <set var="__LINK_EXE_CMD" eval="0">
            $(__LINK_CMD_BASE)
            $(__linker) @$(__lbc_file)
        </set>        
        <set var="__LINK_LIB_CMD" eval="0">
            @%create $(__lbc_file)
            @for %i in ($(__objects_var)) do @%append $(__lbc_file) +%i
            wlib -q -p$(LIB_PAGESIZE) -n -b $^@ @$(__lbc_file)
        </set>
        <set var="__LINK_DLL_CMD" eval="0">
            $(__LINK_CMD_BASE)
            @%append $(__lbc_file) system nt_dll
            $(__linker) @$(__lbc_file)
            wlib -q -n -b $(__targetdir)$(__libname).lib +$^@
        </set>
        <set var="__LINK_MODULE_CMD" eval="0">
            $(__LINK_CMD_BASE)
            @%append $(__lbc_file) system nt_dll
            $(__linker) @$(__lbc_file)
        </set>
    </template>
    
    <template id="__subproject_templ">
        <set var="__MAKE_SUBPROJECT_CMD" eval="0">
            cd $(__subdir)
            wmake $(DOLLAR)(__MAKEOPTS__) -f $(os.path.basename(OUTPUT_FILE)) $(MAKEARGS) $(__subtarget)
            cd $(DOLLAR)(WATCOM_CWD)
        </set>
        <set var="__INSTALL_SUBPROJECT_CMD" eval="0">
            cd $(__subdir)
            wmake $(DOLLAR)(__MAKEOPTS__) -f $(os.path.basename(OUTPUT_FILE)) $(MAKEARGS) install
            cd $(DOLLAR)(WATCOM_CWD)
        </set>
        <set var="__CLEAN_SUBPROJECT_CMD" eval="0">
            cd $(__subdir)
            wmake $(DOLLAR)(__MAKEOPTS__) -f $(os.path.basename(OUTPUT_FILE)) $(MAKEARGS) clean
            cd $(DOLLAR)(WATCOM_CWD)
        </set>
    </template>

</makefile>
