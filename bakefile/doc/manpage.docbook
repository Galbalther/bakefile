<reference>
  <title>Running Bakefile</title>

  <refentry id="man.bakefile">
    <refmeta>
      <refentrytitle>bakefile</refentrytitle>
      <manvolnum>1</manvolnum>
    </refmeta>
    <refnamediv>
      <refname>bakefile</refname>
      <refpurpose>native makefiles generator</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>bakefile</command>
        <arg choice="opt">
          <option>--version</option>
        </arg>
        <arg choice="opt">
          <option>--help</option>
        </arg>
        <arg choice="plain">
          <option>-f</option><replaceable class="parameter">FORMAT</replaceable>
        </arg>
        <arg choice="plain">
          <option>-o</option><replaceable class="parameter">OUTFILE</replaceable>
        </arg>        
        <arg choice="opt" rep="repeat">
          <option>-D</option><replaceable
            class="parameter">VAR</replaceable>=<replaceable class="parameter">VALUE</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <option>-I</option><replaceable class="parameter">PATH</replaceable>
        </arg>
        <arg choice="opt">
          <option>-v</option>
        </arg>        
        <arg choice="opt">
          <option>-q</option>
        </arg>        
        <arg choice="opt">
          <option>--dump</option>
        </arg>        
        <arg choice="plain">
          <replaceable class="parameter">file.bakefile</replaceable>
        </arg>
      </cmdsynopsis>
    </refsynopsisdiv>
    
    <refsect1>
      <title>Description</title>
      <para>
        <command>bakefile</command> creates various types of
        Makefiles and project files from a single project
        description called a "Bakefile".
      </para>
    </refsect1>

    <refsect1>
      <title>Command Line Options</title>
      <para>
        <variablelist>

          <varlistentry>
            <term>
              <option>--version</option>
            </term>
            <listitem>
              <para>
                Display Bakefile version and exit.
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>-h</option>, <option>--help</option>
            </term>
            <listitem>
              <para>
                Display usage information and exit.
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>-f</option><replaceable
                class="parameter">FORMAT</replaceable>, 
              <option>--format</option>=<replaceable
                class="parameter">FORMAT</replaceable>
            </term>
            <listitem>
              <para>
                Specify output format. Bakefile supports these formats:
              </para>

              <para>
                <informaltable>
                  <tgroup cols='2'>
                    <thead>
                      <row>
                        <entry>Format</entry>
                        <entry>File(s) Generated</entry>
                      </row>
                    </thead>

                    <tbody>
                      <row>
                        <entry>autoconf</entry>
                        <entry>Makefile.in for GNU Autoconf</entry>
                      </row>

                      <row>
                        <entry>borland</entry>
                        <entry>Makefile for Borland C++ and Borland
                        make</entry>
                      </row>

                      <row>
                        <entry>cbuilderx</entry>
                        <entry>Borland C++Builder X project files</entry>
                      </row>

                      <row>
                        <entry>dmars</entry>
                        <entry>Generic Makefile for Digital Mars C/C++</entry>
                      </row>

                      <row>
                        <entry>dmars_smake</entry>
                        <entry>Makefile for Digital Mars C/C++ with
                        SMAKE</entry>
                      </row>

                      <row>
                        <entry>gnu</entry>
                        <entry>Makefile for GNU toolchain: GNU Make, GCC,
                        etc.</entry>
                      </row>

                      <row>
                        <entry>mingw</entry>
                        <entry>Makefile for MinGW toolchain:
                        mingw32-make, MinGW port of GCC, etc.</entry>
                      </row>

                      <row>
                        <entry>msvc</entry>
                        <entry>Makefile for Visual C++ with Microsoft
                        nmake</entry>
                      </row>

                      <row>
                        <entry>msvc6prj</entry>
                        <entry>Microsoft Visual C++ 6.0 project files</entry>
                      </row>

                      <row>
                        <entry>msevc4prj</entry>
                        <entry>Microsoft Embedded Visual C++ 4 project
                        files</entry>
                      </row>

                      <row>
                        <entry>symbian</entry>
                        <entry>Symbian development files</entry>
                      </row>

                      <row>
                        <entry>watcom</entry>
                        <entry>Makefile for OpenWatcom C/C++</entry>
                      </row>

                      <row>
                        <entry>xcode2</entry>
                        <entry>Apple Xcode 2.<emphasis>x</emphasis>
                        project files</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>-o</option><replaceable
                class="parameter">OUTFILE</replaceable>, 
              <option>--output</option>=<replaceable
                class="parameter">OUTFILE</replaceable>
            </term>
            <listitem>
              <para>
                File to write generated makefile to. For those backends
                that generate more than one file, this option specifies
                the name of the main makefile.
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>-D</option><replaceable
            class="parameter">VAR</replaceable>=<replaceable class="parameter">VALUE</replaceable>
            </term>
            <listitem>
              <para>
                Define Bakefile variable. This definition overrides any
                definition from the ruleset or input makefile. You can use it
                to customize generated output.
              </para>
            </listitem>
          </varlistentry>
          
          
          <varlistentry>
            <term>
              <option>-I</option><replaceable class="parameter">PATH</replaceable>            
            </term>
            <listitem>
              <para>
                Add path to the list of directories where Bakefile looks for
                rules and output templates.
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>-v</option>
            </term>
            <listitem>
              <para>Be verbose.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>--debug</option>
            </term>
            <listitem>
              <para>show internal debugging information</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>-q</option>
            </term>
            <listitem>
              <para>Supress all output except for errors.</para>
            </listitem>
          </varlistentry>
          
          
          <varlistentry>
            <term>
              <option>--dump</option>
            </term>
            <listitem>
              <para>
                Dump all Bakefile variables and targets to standard output
                instead of generating output. This is only useful for
                debugging Bakefile or ill-behaving makefiles.
              </para>
            </listitem>
          </varlistentry>
          

          <varlistentry>
            <term>
              <option>--output-deps</option>=<replaceable
              class="parameter">FILE</replaceable>
            </term>
            <listitem>
              <para>
                Output dependency information needed by
                <command>bakefile_gen</command> utility
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>--output-changes</option>=<replaceable
              class="parameter">FILE</replaceable>
            </term>
            <listitem>
              <para>
                Store list of changed files to the given file
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>
              <option>--xml-cache</option>=<replaceable
              class="parameter">FILE</replaceable>
            </term>
            <listitem>
              <para>
                specify cache file where <command>bakefile_gen</command>
                stores pre-parsed XML files
              </para>
            </listitem>
          </varlistentry>
          
        </variablelist>
      </para>
    </refsect1>
    
    <refsect1>
      <title>Environment Variables</title>
      <para>
        <variablelist>
          <varlistentry id="searchpaths">
            <term>BAKEFILE_PATHS</term>
            <listitem>
              <para>
                List of directories where ruleset files are looked for (syntax
                is same as in <varname>PATH</varname>). Bakefile's data
                directory is always searched in addition to paths listed in
                <varname>BAKEFILE_PATHS</varname>, but
                <varname>BAKEFILE_PATHS</varname> has higher priority.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsect1>

  </refentry>




  <refentry id="man.bakefilize">
    <refmeta>
      <refentrytitle>bakefilize</refentrytitle>
      <manvolnum>1</manvolnum>
    </refmeta>
    <refnamediv>
      <refname>bakefilize</refname>
      <refpurpose>prepare Bakefile project for use with Autoconf</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
        <command>bakefile</command>
        <arg choice="opt">
          <option>--copy</option>
        </arg>
        <arg choice="opt">
          <option>--dry-run</option>
        </arg>
        <arg choice="opt">
          <option>--force</option>
        </arg>
        <arg choice="opt">
          <option>--verbose</option>
        </arg>
        <arg choice="opt">
          <option>--help</option>
        </arg>
    </cmdsynopsis>
    </refsynopsisdiv>

    <refsect1>
      <title>Description</title>
      <para>
      For the "autoconf" format, Bakefile creates Makefile.in
      files that depend on the availability of common pieces
      of a GNU build system. (<filename>config.guess</filename>, 
    <filename>install-sh</filename>, etc.) These tools
    are part of Automake, which can copy these files
    into a project's directory during processing.
    <command>bakefilize</command> effectively replaces
    the <command>automake --add-missing</command> feature.
    </para>

    <para>
      It is standard practice in Autoconf-based projects to
      provide a "bootstrap" script (commonly called
    either <command>bootstrap</command> or
    <command>autogen.sh</command>) to run commands
    like <command>autoconf</command> with the proper
    flags and in the proper order. You should run
    <command>bakefilize</command> in that script, at
    some point before the <command>configure</command>
    script runs.
    </para>
    </refsect1>

    <refsect1>
      <title>Command Line Options</title>
      <para>
        <variablelist>

          <varlistentry>
            <term>
              <option>-c</option>, <option>--copy</option>
            </term>
            <listitem>
              <para>
                Copy the files from the Automake directory, rather than
        the default behavior of making symbolic links.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>-n</option>, <option>--dry-run</option>
            </term>
            <listitem>
              <para>
                Only show the commands that would be executed.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>-f</option>, <option>--force</option>
            </term>
            <listitem>
              <para>
                Replace all existing files, instead of only adding
        missing files.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>-v</option>, <option>--verbose</option>
            </term>
            <listitem>
              <para>
                Show debugging messages.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <option>--help</option>
            </term>
            <listitem>
              <para>
                Display usage information for
        <command>bakefilize</command>
              </para>
            </listitem>
          </varlistentry>
          
        </variablelist>
      </para>
    </refsect1>
    
  </refentry>
</reference>
